<script type="module">
if ('serviceWorker' in navigator) {
    // SW Registration
    navigator.serviceWorker.register('/service-worker.js');

    // listen out for a message from the service worker
    navigator.serviceWorker.addEventListener('message', (evt) => {
        // if we get this event, an updated version now sits in the cache
        //if(event.data.type == 'refresh'){
            //console.info(`Updated version of ${event.data.url} found. Reloading the page.`);
            // so refresh the page
            //window.location.reload();
        //}
    });

    // cache the offline page when the page loads
    caches.open('govuk-ds-saved-pages').then(cache => {
        // always add an updated version of the offline page
        cache.add('/offline/index.html');
    });

    // Check see if the page has already been saved
    caches.match(window.location.href)
    .then(isPageInCache => {
        const insertPoint = document.querySelector('div.app-content__header')
        const offlineCTA = document.createElement('a')
        offlineCTA.className = `govuk-!-font-size-16 govuk-!-margin-bottom-2 govuk-link`;
        offlineCTA.href = "#";
        offlineCTA.innerText = isPageInCache ? `Remove from cache` : `Save for reading offline`;
        offlineCTA.style.display = "block";

        // check for the insert point on the page, and if user is currently online (stop a user removing from cache when offline)
        if(insertPoint && navigator.onLine){
            // check see if we are on the offline page, if we are return
            if(typeof insertPoint.dataset.offlinepage !== 'undefined'){return;}
            insertPoint.appendChild(offlineCTA);

            insertPoint.querySelector('h1').className += " govuk-!-margin-bottom-1";

            // add the click event to the offline button
            offlineCTA.addEventListener('click', event => {
                event.preventDefault()
                offlineCTA.innerText = `One moment please...`

                if(isPageInCache){
                    caches.open('govuk-ds-saved-pages')
                    .then(cacheName => {
                        isPageInCache = false;
                        let iframeArray = JSON.parse(localStorage.getItem(window.location.href)).iframes;
                        localStorage.removeItem(window.location.href)
                        offlineCTA.innerText = `Save for reading offline`
                        // force the clicked link to unblur
                        document.activeElement.blur();
                        // delete the page from the cache
                        return cacheName.delete(window.location.href)
                            .then(() => {
                                // if we have stored an array of iframes associated with the page, delete them from the cache
                                if(iframeArray){
                                    return Promise.all(iframeArray.map(iframe => {
                                        return cacheName.delete(iframe);
                                    }))
                                }

                                return;
                            });
                    })
                } else {
                    caches.open('govuk-ds-saved-pages')
                    .then(openCache => {
                        openCache.add(window.location.href)
                        .then(() => {
                            storePageMetaAndIframes(openCache);

                            offlineCTA.innerText = `Page Saved!`
                            // force the clicked link to unblur
                            document.activeElement.blur();
                            isPageInCache = true
                        })
                    })
                }
            })
            
        }
    })

    function storePageMetaAndIframes(openCache){
        let pageIframes = document.getElementsByTagName('iframe');
        // check see if we have iframes on the page
        if(pageIframes.length){
            // convert to a real array
            pageIframes = Array.from(pageIframes)
                // map over iframs to get their src attributes
                .map(iframe => iframe.getAttribute('src'));

            // create an array of unique values (any duplicates throw a DOMException)
            var uniqueUrls = [...new Set(pageIframes)];
            
            // add the iframes to the cache
            openCache.addAll(uniqueUrls).then(result => {
                return result;
            }).catch(error => {
                console.warn(error);
            });
        }

        const documentData = {
            'title': document.querySelector('title').innerText,
            'description': document.querySelector('meta[name="description"]').getAttribute('content'),
            'iframes': uniqueUrls
        }

        localStorage.setItem(
            window.location.href,
            JSON.stringify(documentData)
        )
    }

    var ConnectionStatus = (function () {
        var messageWrapper

        function init () {
            // generate the message wrapper
            messageWrapper = document.createElement('div')
            messageWrapper.style.cssText = 'position:fixed; bottom:0; right: 0; display:none; z-index: 10;'
            messageWrapper.className = 'govuk-tag app-tag--review govuk-message-wrapper'

            // append the wrapper to the page
            document.body.appendChild(messageWrapper)
        }

        var showMessage = function (message) {
            messageWrapper.innerHTML = message
            messageWrapper.style.display = 'block'
        }

        var hideMessage = function () {
            messageWrapper.innerHTML = ''
            messageWrapper.style.display = 'none'
        }

        var update = function () {
            if (navigator.onLine) { // online
                // hide the message
                hideMessage()
            } else { // offline
                showMessage('Offline')
            }
        }

        // initialise the module
        init()

        // expose methods publicly
        return {
            update: update
        }
    }())

    // Check see if page is already offline
    ConnectionStatus.update();

    // trigger the connection state events
    window.addEventListener('online', ConnectionStatus.update)
    window.addEventListener('offline', ConnectionStatus.update)
}
</script>